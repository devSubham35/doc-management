generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////////////////////////////
///////////// ENUMS //////////////////////////
//////////////////////////////////////////////

enum Role {
  CLINICIAN
  SUPERVISOR
  PARTNER
  PAYROLL
}

enum SubmissionStatus {
  PENDING
  SUPERVISOR_APPROVED
  SUPERVISOR_REJECTED
  PARTNER_APPROVED
  PARTNER_REJECTED
  PAYROLL_APPROVED
  PAYROLL_REJECTED
  COMPLETED
}

//////////////////////////////////////////////
///////////// MODELS /////////////////////////
//////////////////////////////////////////////

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  submissions         Submission[] @relation("ClinicianSubmissions")
  supervisorApprovals Submission[] @relation("SupervisorApprovals")
  partnerApprovals    Submission[] @relation("PartnerApprovals")
  payrollApprovals    Submission[] @relation("PayrollApprovals")

  @@map("users")
}

model Submission {
  id              String           @id @default(cuid())
  studentInitials String
  workDate        DateTime
  evaluationType  String
  hours           Float
  reportUrl       String?
  supervisorNotes String?
  partnerNotes    String?
  payrollNotes    String?
  status          SubmissionStatus @default(PENDING)
  isCompleted     Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Foreign Keys
  clinicianId  String
  supervisorId String?
  partnerId    String?
  payrollId    String?

  // Relations
  clinician  User  @relation("ClinicianSubmissions", fields: [clinicianId], references: [id])
  supervisor User? @relation("SupervisorApprovals", fields: [supervisorId], references: [id])
  partner    User? @relation("PartnerApprovals", fields: [partnerId], references: [id])
  payroll    User? @relation("PayrollApprovals", fields: [payrollId], references: [id])

  // Approval history
  approvalHistory ApprovalHistory[]

  @@map("submissions")
}

model ApprovalHistory {
  id           String           @id @default(cuid())
  submissionId String
  fromStatus   SubmissionStatus?
  toStatus     SubmissionStatus
  action       String           // "APPROVED" or "REJECTED"
  note         String?          // Rejection note or approval comment
  userId       String           // Who performed the action
  userName     String           // Store name for audit trail
  userRole     Role             // Store role for audit trail
  createdAt    DateTime         @default(now())

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("approval_history")
}
